
//init
var left = document.getElementById('left'),
    right = document.getElementById('right'),
    links = document.getElementById('links'),
    mufta = document.getElementById('mufta'),
    data = {},
    sizes = {
    	width: mufta.getBoundingClientRect().width,
    	height: mufta.getBoundingClientRect().height,
    	cableWidth: mufta.getBoundingClientRect().width / 5,
    	cableHeight: 20
    },
    textareas = document.getElementsByTagName('textarea');

	//events
	for (var n = 0; textareas[n]; n++)
		textareas[n].addEventListener('keyup', update, false);


function update() {
	window.link_path=[];
	data = {
		left: _createDataArray('left'),
		right: _createDataArray('right'),
		links: links.value.split('\n')
	};
	while (mufta.lastChild) {
		mufta.removeChild(mufta.lastChild);
	}
	mufta.setAttribute('height', Math.max(data.left.length, data.right.length) * sizes.cableHeight + 1);
	renderCables();
	renderLinks();
}


function renderLinks() {
	var x2, y2, x1, y1, color;
	x1 = sizes.cableWidth;
	x2 = sizes.width - sizes.cableWidth;

    var lnk=[];
	for (var n = 0; n < data.links.length; n++) {
		data.links[n] = data.links[n].trim();
		if (data.links[n] == "")
			continue;
		var dn = data.links[n].split('-');
		
		if (data.left[+dn[0]] && data.right[+dn[1]]) {
			color = data.left[+dn[0]][data.left[+dn[0]].length - 1];
			var color2="";

			y1 = +dn[0] * sizes.cableHeight + sizes.cableHeight/2;
			y2 = +dn[1] * sizes.cableHeight + sizes.cableHeight/2;
			lnk.push([x1, y1, x2, y2, color,data.right[+dn[1]][data.right[+dn[1]].length - 1]]);
		}
	}
	function compareNumeric(a, b) {
	  if (Math.abs(a[1]-a[3]) > Math.abs(b[1]-b[3])) return 1;
	  if (Math.abs(a[1]-a[3]) < Math.abs(b[1]-b[3])) return -1;
	}
	lnk.sort(compareNumeric);
	for (var i=0;i<lnk.length;i++)  _addLine(lnk[i][0],lnk[i][1],lnk[i][2],lnk[i][3],lnk[i][4],lnk[i][5]);
	if (window.linkpoint) window.linkpoint();
	links.value = data.links.join('\n');
}


function renderCables() {
	var node,
	    color,
	    prev = [],
	    dn,
	    y, x, width, height;

	for (var n = 0; data.left[n]; n++) {
		dn = data.left[n];
		color = dn[dn.length -1];
		node = _addConnector(color, n, 'left');

		for (var l = 0; l < dn.length - 1; l++) {
			if (!prev[l])
				prev[l] = {data: dn[l], n: n};
			else if (prev[l].data != dn[l]) {
				y = prev[l].n * sizes.cableHeight;
				width = sizes.cableWidth / dn.length;
				x = width * l;
				height = (n - prev[l].n) * sizes.cableHeight;
				node = _addRect(y, x, width, height, "#fff");
				_addText(prev[l].data, y + height/2, x + width/2, "-90");
				prev[l] = {data: dn[l], n: n};
			}
		}
	}
	for (var l = 0; l < dn.length - 1; l++) {
		y = prev[l].n * sizes.cableHeight;
		width = sizes.cableWidth / dn.length;
		x = width * l;
		height = (n - prev[l].n) * sizes.cableHeight;
		node = _addRect(y, x, width, height, "#fff");
		_addText(prev[l].data, y + height/2, x + width/2, "-90");
	}
	prev = [];

	for (var n = 0; data.right[n]; n++) {
		dn = data.right[n];
		color = dn[dn.length -1];
		node = _addConnector(color, n, 'right');

		for (var l = 0; l < dn.length - 1; l++) {
			if (!prev[l])
				prev[l] = {data: dn[l], n: n};
			else if (prev[l].data != dn[l]) {
				y = prev[l].n * sizes.cableHeight;
				width = sizes.cableWidth / dn.length;
				x = sizes.width - width * (l + 1);
				height = (n - prev[l].n) * sizes.cableHeight;
				node = _addRect(y, x, width, height, "#fff");
				_addText(prev[l].data, y + height/2, x + width/2, "90");
				prev[l] = {data: dn[l], n: n};
			}
		}
	}
	for (var l = 0; l < dn.length - 1; l++) {
		y = prev[l].n * sizes.cableHeight;
		width = sizes.cableWidth / dn.length;
		x = sizes.width - width * (l + 1);
		height = (n - prev[l].n) * sizes.cableHeight;
		node = _addRect(y, x, width, height, "#fff");
		_addText(prev[l].data, y + height/2, x + width/2, "90");
	}
}


function _addConnector(color, n, pos) {
	var y = n * sizes.cableHeight,
	    x = pos == 'left' ? 0 : sizes.width - sizes.cableWidth,
	    height = sizes.cableHeight,
	    width = sizes.cableWidth;

	_addRect(y, x, width, height, color);
}

function _addRect(y, x, width, height, color) {
	var node = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
	y += 1;
	node.setAttribute('y', y);
	node.setAttribute('x', x);
	node.setAttribute('height', height);
	node.setAttribute('width', width);
	node.setAttribute('style', "fill:" + color + "; stroke-width:1; stroke:#111");
	mufta.appendChild(node);
	return node;
}
//client89
var rast_1=sizes.cableHeight;
var ras_ob=Math.ceil((sizes.width-2*sizes.cableWidth-2*rast_1)/rast_1);
function prekrest(x,y){
	for (var i=0;i<window.link_path.length;i++) for (var j=0;j<window.link_path[i].ar.length-1;j++) if (window.link_path[i].ar[j][0]==x &&window.link_path[i].ar[j][1]) {
	};
};
function rasprd(t) {
		var e=t/2;
		if (t%2) e=-Math.round(t/2);
		return e;
	};
function perkY(y1,y2,x,XY) {
		var xx=0;
		var yy=1;
		if (XY) {
			var xx=1;
		    var yy=0;
		};
		if (y1>y2){var e=y1;y1=y2;y2=e;};
		var p=false;
		 for (var i=0;i<window.link_path.length;i++) for (var j=0;j<window.link_path[i].ar.length;j++){
			if (window.link_path[i].ar[j][xx]==x) {
				var a1=window.link_path[i].ar[j][yy]>=y1;
				var a2=window.link_path[i].ar[j][yy]<=y2;
				var a3=false;
				if (j<window.link_path[i].ar.length-1) {
					var b1=window.link_path[i].ar[j][yy];
					var b2=window.link_path[i].ar[j+1][yy];
					if (b1>b2) {
						var e=b1;
						b1=b2;
						b2=e;
					};
					a3=b1<=y1 && b2>=y1;
				};
			    if ((a1 && a2) || a3 )
				{
				  p=true;
				  j=window.link_path[i].ar.length-1;
				  i=window.link_path.length-1;
				};

			};
		};
		return p;
	};
	
function _addLine(x1, y1, x2, y2, color, color2) {
	function obhod (x1,y1){
			  function findX_po_y(x1,x2,y){
				x=true;
				var rz=ras_ob*rast_1;
				while (x && rz>0 ) {
					rz-=rast_1;
					var a1=perkY(x1,x1+rz,y,1);
					var a2=perkY(y,y,x1+rz,0);
					x=a1 || a2;
				};
				return rz;
			};
			function findY_po_x(xx,y1){
				var t=1;
				var x=true;
				while  (t<ras_ob && x) {
					y=y1+rasprd(t)*rast_1;
					x=perkY(xx,xx+rast_1,y,1);
					t++;
				};
				return y-y1;
			};
			var yp=y1;
			var xp=x1;
			var rz=findX_po_y(xp,x2,yp); 
			if (rz) {
				xp+=rz;
				path.ar.push([xp,y1]);
			};
			var rz=findY_po_x(xp,yp);
			if (rz) yp+=rz;
			return [xp,yp];
		};
	function findX(x1,x2,y1,y2){
		var p=true;
		var t=0;
		while (t<(ras_ob-1) && p) {
			var x=(Math.ceil(ras_ob/2)+rasprd(t))*rast_1+sizes.cableWidth+rast_1;
			p=x<x1 || perkY(y1,y2,x,0) || perkY(x1,x,y1,1) || perkY(x,x2,y2,1);
			t++;
		};
		if (p) x=false;
		return x;
	};
	var path = document.createElementNS('http:/'+'/www.w3.org/2000/svg','path');
	path.ar=[];
	path.ar.push([x1,y1]);
	if (y1!=y2) {
		  var x=findX(x1,x2,y1,y2);
		  if (x) {
			  path.ar.push([x,y1]);
			  path.ar.push([x,y2]);
			  path.ar.push([x2,y2]);
		  } else {
				  var r=[x1,y1];
				  var t=30;
				  do {
					  var r=obhod (r[0],r[1]);
					  path.ar.push(r);
					  t--;
				  } while (!(x=findX(r[0],x2,r[1],y2)) && t);
				  if (x) {
					  path.ar.push([x,r[1]]);
				      path.ar.push([x,y2]);
				  };
			 };
	  
	};
	if (path.ar.length<2) path.ar.push([Math.ceil(ras_ob/2)*rast_1+sizes.cableWidth+rast_1,y1]);
	path.ar.push([x2,y2]);
	for (i=0;i<path.ar.length;i++) for (j=0;j<path.ar[i].length;j++) path.ar[i][j]=Math.round(path.ar[i][j]/2)*2;
	var d="";
	d+="M "+path.ar[0][0]+","+path.ar[0][1]+" ";
	for (i=1;i<path.ar.length;i++) d+="L "+path.ar[i][0]+","+path.ar[i][1]+" ";
	path.setAttribute('d',d);
	path.setAttribute('style', "stroke:" + color + "; stroke-width:2; fill:none");
	path.col2=color2;
	path.col=color;
	mufta.appendChild(path);
	window.link_path.push(path);
	
	return path;
	
};
_addLine.toString="";
function linkpoint(){
	for (var i=0;i<window.link_path.length;i++) {
		var ob_cen=window.link_path[i].ar[0][0]+Math.ceil(ras_ob*rast_1/2)+rast_1; 
		var ind_cen=0;
		var kr=[0,0];
		zn_c=Math.abs(window.link_path[i].ar[0][0]-ob_cen);
		for (var j=0;j<window.link_path[i].ar.length;j++) {
			if (Math.abs(window.link_path[i].ar[j][0]-ob_cen)<zn_c) {
				zn_c=Math.abs(window.link_path[i].ar[j][0]-ob_cen);
				ind_cen=j;
				kr=window.link_path[i].ar[j];
			};;
		};
		var cr=document.createElementNS('http:/'+'/www.w3.org/2000/svg','circle');
		cr.setAttribute("cx",kr[0]);
		cr.setAttribute("cy",kr[1]);
		cr.setAttribute("r",4);
		cr.setAttribute("fill",window.link_path[i].col);
		window.link_path[i].parentNode.appendChild(cr);
		var c2=cr.cloneNode(true);
		c2.setAttribute("fill",window.link_path[i].col2);
		c2.setAttribute("r",3);
		window.link_path[i].parentNode.appendChild(c2);
		var pt=document.createElementNS('http:/'+'/www.w3.org/2000/svg','path');  
		var d="M "+kr[0]+","+kr[1]+" L";
		for (var j=ind_cen+1;j<window.link_path[i].ar.length;j++) d+=window.link_path[i].ar[j][0]+","+window.link_path[i].ar[j][1]+" ";
		pt.setAttribute("d",d);
		pt.setAttribute('style', "stroke:" +window.link_path[i].col2 + "; stroke-width:2; fill:none");
		window.link_path[i].parentNode.appendChild(pt);
	};
	
};
function _addText(text, y, x, rotate) {
	var newText = document.createElementNS('http://www.w3.org/2000/svg',"text");
	y += 1;
	newText.setAttribute("y",y);
	newText.setAttribute("x",x);
	if (rotate)
		newText.setAttribute("transform","rotate(" + rotate + ", " + x + ", " + y + ")");
	newText.setAttribute("font-family","sans-serif");
	newText.setAttribute("font-size","10px");
	newText.setAttribute("text-anchor","middle");
	newText.setAttribute("dominant-baseline","middle");
	newText.setAttribute("fill","red");
	newText.appendChild(document.createTextNode(text));
	mufta.appendChild(newText);
	return newText;
}



function _createDataArray(name) {
	if (!window[name] && !window[name].value) return;

	var rows0 = window[name].value.split('\n'),//.sort();
	    rows = [];

	for (var n = 0; rows0[n]; n++) {
		rows0[n] = rows0[n].trim();
		if (rows0[n] > "")
			rows.push(rows0[n].split(','));
	}
	window[name].value = rows0.join('\n');

	return rows;
}
//# sourceMappingURL=main.min.js.map
